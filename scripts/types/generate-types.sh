#!/usr/bin/env bash
set -o pipefail

script_dir="$(cd "$(dirname "$(readlink -f "$0")")" && pwd)" || {
  echo "Couldn't determine the script's running directory, which probably matters, bailing out" >&2
  exit 2
}
script_name="$(basename "$(readlink -f "$0")")" || {
  echo "Couldn't determine the script's name, which probably matters, bailing out" >&2
  exit 2
}

DEFAULT_OPENAPI_SPEC="https://api.jinko.ai/openapi.json"
DEFAULT_OUTPUT_FILE="${script_dir}/../../jinko_helpers/types/api_types_dict.py"

# Created by argbash-init v2.10.0
# ARG_OPTIONAL_SINGLE([input],[i],[OpenAPI spec (can be a URL or a local file)],[$DEFAULT_OPENAPI_SPEC])
# ARG_OPTIONAL_SINGLE([output],[o],[output file],[$DEFAULT_OUTPUT_FILE])
# ARG_HELP([<Generate Python types from an OpenAPI spec>])
# ARGBASH_SET_INDENT([  ])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}


begins_with_short_option()
{
  local first_option all_short_options='ioh'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_input="$DEFAULT_OPENAPI_SPEC"
_arg_output="$DEFAULT_OUTPUT_FILE"


print_help()
{
  printf '%s\n' "<Generate Python types from an OpenAPI spec>"
  printf 'Usage: %s [-i|--input <arg>] [-o|--output <arg>] [-h|--help]\n' "$0"
  printf '\t%s\n' "-i, --input: OpenAPI spec (can be a URL or a local file) (default: '$DEFAULT_OPENAPI_SPEC')"
  printf '\t%s\n' "-o, --output: output file (default: '$DEFAULT_OUTPUT_FILE')"
  printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      -i|--input)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_input="$2"
        shift
        ;;
      --input=*)
        _arg_input="${_key##--input=}"
        ;;
      -i*)
        _arg_input="${_key##-i}"
        ;;
      -o|--output)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_output="$2"
        shift
        ;;
      --output=*)
        _arg_output="${_key##--output=}"
        ;;
      -o*)
        _arg_output="${_key##-o}"
        ;;
      -h|--help)
        print_help
        exit 0
        ;;
      -h*)
        print_help
        exit 0
        ;;
      *)
        _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
        ;;
    esac
    shift
  done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

root_dir=${script_dir}/../..
template_dir=${script_dir}/data

url_arg=""
input_arg=""
if [[ ${_arg_input} == http* ]]; then
  url_arg="--url ${_arg_input}"
else
  input_arg="--input ${_arg_input}"
fi

output_dir=$(realpath "$(dirname "${_arg_output}")")
output_filename=$(basename "${_arg_output}")
output_file="${output_dir}/${output_filename}"

echo "Generating Python types from ${_arg_input}..." 1>&2

cd ${root_dir} && datamodel-codegen ${url_arg} ${input_arg} --output "${output_file}" \
  --input-file-type openapi --output-model-type typing.TypedDict \
  --use-schema-description --use-field-description \
  --strict-nullable --target-python-version 3.12 \
  --custom-template-dir ${template_dir} || exit $?

echo "Python types successfully generated in ${output_file}" 1>&2

echo "Linting the types file..."
black ${output_file}

exit 0

# ] <-- needed because of Argbash
